inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
plot(clutch_22~clutch_21, dta)
plot(clutch_21~clutch, dta)
plot(clutch_22~clutch, dta)
scale(data_2022$w_yac_wpa)
data_2022$clutch
df <- data.frame(x2=rnorm(100),y2=rnorm(100))
annotations <- data.frame(
xpos = c(-Inf,-Inf,Inf,Inf),
ypos =  c(-Inf, Inf,-Inf,Inf),
annotateText = c("Bad","Fun"
,"Inefficient","Clutch"),
hjustvar = c(0,0,1,1) ,
vjustvar = c(0,1,0,1)) #<- adjust
plot_clutch <- function(dataframe, yr){
dataframe %>%
ggplot(aes(y = clutch, x = targets)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(dataframe$clutch), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(dataframe$targets), color = "red", linetype = "dashed", alpha=0.5) +
geom_hline(yintercept = 0, color = "green", linetype = "solid", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  40, color = "green", linetype = "solid", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = dataframe$team_color, cex=dataframe$value / median(dataframe$value), alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=player), max.overlaps = 7) +
#add a smooth line fitting wpa + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
geom_abline(slope = -.05, intercept = (15:-5), alpha = .25)+
#titles and caption
labs(x = "Targets",
y = "Clutch factor",
title = paste("WR Clutch", yr),
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = "tomato")
}
plot_clutch(data_2020, "2020")
plot_clutch(data_2021, "2021")
plot_clutch(data_2022, "2022")
scale(data_2022$w_yac_wpa)
(data_2022$w_yac_wpa - mean(data_2022$w_yac_wpa)) / sd(data_2022$w_yac_wpa)
cor(data_2022$w_yac_wpa, data_2022$avg_yac_above_expectation)
cor(data_2022$w_yac_wpa, data_2022$avg_yac_above_expectation)
cor(data_2021$w_yac_wpa, data_2021$avg_yac_above_expectation)
cor(data_2020$w_yac_wpa, data_2020$avg_yac_above_expectation)
data_2022$clutch <- scale(data_2022$w_yac_wpa) + scale(data_2022$avg_yac_above_expectation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) + scale(data_2021$avg_yac_above_expectation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) + scale(data_2020$avg_yac_above_expectation)
dta <- data_2022 %>%
inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
plot(clutch_22~clutch_21, dta)
plot(clutch_21~clutch, dta)
plot(clutch_22~clutch, dta)
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
scale(data_2022$avg_yac_above_expectation) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
scale(data_2021$avg_yac_above_expectation) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
scale(data_2020$avg_yac_above_expectation) +
scale(data_2020$avg_separation)
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
plot(clutch_22~clutch_21, dta)
plot(clutch_21~clutch, dta)
plot(clutch_22~clutch, dta)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_yac_above_expectation", "avg_separation")])
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
#  scale(data_2022$avg_yac_above_expectation) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
#  scale(data_2021$avg_yac_above_expectation) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
#  scale(data_2020$avg_yac_above_expectation) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_yac_above_expectation", "avg_separation")])
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
df <- data.frame(x2=rnorm(100),y2=rnorm(100))
annotations <- data.frame(
xpos = c(-Inf,-Inf,Inf,Inf),
ypos =  c(-Inf, Inf,-Inf,Inf),
annotateText = c("Bad","Fun"
,"Inefficient","Clutch"),
hjustvar = c(0,0,1,1) ,
vjustvar = c(0,1,0,1)) #<- adjust
plot_clutch <- function(dataframe, yr){
dataframe %>%
ggplot(aes(y = clutch, x = targets)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(dataframe$clutch), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(dataframe$targets), color = "red", linetype = "dashed", alpha=0.5) +
geom_hline(yintercept = 0, color = "green", linetype = "solid", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  40, color = "green", linetype = "solid", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = dataframe$team_color, cex=dataframe$value / median(dataframe$value), alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=player), max.overlaps = 7) +
#add a smooth line fitting wpa + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
geom_abline(slope = -.05, intercept = (15:-5), alpha = .25)+
#titles and caption
labs(x = "Targets",
y = "Clutch factor",
title = paste("WR Clutch", yr),
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = "tomato")
}
plot_clutch(data_2020, "2020")
plot_clutch(data_2021, "2021")
plot_clutch(data_2022, "2022")
df <- data.frame(x2=rnorm(100),y2=rnorm(100))
annotations <- data.frame(
xpos = c(-Inf,-Inf,Inf,Inf),
ypos =  c(-Inf, Inf,-Inf,Inf),
annotateText = c("Bad","Fun"
,"Inefficient","Clutch"),
hjustvar = c(0,0,1,1) ,
vjustvar = c(0,1,0,1)) #<- adjust
plot_clutch <- function(dataframe, yr){
dataframe %>%
ggplot(aes(y = clutch, x = targets)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(dataframe$clutch), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(dataframe$targets), color = "red", linetype = "dashed", alpha=0.5) +
geom_hline(yintercept = 0, color = "green", linetype = "solid", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  40, color = "green", linetype = "solid", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = dataframe$team_color, cex=dataframe$value / median(dataframe$value), alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=player), max.overlaps = 5) +
#add a smooth line fitting wpa + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
geom_abline(slope = -.05, intercept = (15:-5), alpha = .25)+
#titles and caption
labs(x = "Targets",
y = "Clutch factor",
title = paste("WR Clutch", yr),
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = "tomato")
}
plot_clutch(data_2020, "2020")
plot_clutch(data_2021, "2021")
plot_clutch(data_2022, "2022")
filter(load_pbp(seasons = 2022), receiver_player_name == 'T.Hill', posteam == 'MIA', pass_attempt == 1)
tst <- filter(load_pbp(seasons = 2022), receiver_player_name == 'T.Hill', posteam == 'MIA', pass_attempt == 1)
tst[order(tst$yac_wpa,decreasing = T),]
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("yac_wpa")]
colnames(tst)
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("yards_after_catch", "desc","yac_wpa")]
get_wr_data <- function(YEARS){
schedule <- filter(load_schedules(seasons = 2022), game_type == "REG")
rolling_wins <- matrix(nrow = 32, ncol = 18)
teams <- sort(unique(schedule$away_team))
for (i in 1:32){
cur_team <- teams[i]
for (j in 1:18){
rolling_wins[i,j] <- ifelse(j == 1, 0, rolling_wins[i,j-1] )
tmp <- filter(schedule, (home_team == cur_team) | away_team == cur_team, week == j-1)
if (nrow(tmp) != 0){
if (tmp$away_team[1] == cur_team){
rolling_wins[i,j] <- ifelse(j>1,
(1 * (tmp$result[1] < 0)) + rolling_wins[i,(j-1)],
0)
}
else if (tmp$home_team[1] == cur_team){
rolling_wins[i,j] <- ifelse(j>1,
(1 * (tmp$result[1] > 0)) + rolling_wins[i,(j-1)],
0)
}
}
}
}
rolling_wins <- as.data.frame(rolling_wins)
rownames(rolling_wins) <- teams
colnames(rolling_wins) <- 1:18
data = load_pbp(YEARS)
data <- data %>%
left_join(load_teams(), by = c('posteam' = 'team_abbr'))
contracts_with_id <- filter(load_contracts(), is_active == T) %>% inner_join(load_players()[,c('gsis_id', 'display_name', 'position')], by = join_by(player == display_name, position == position))
nextgen <- filter(load_nextgen_stats(seasons = YEARS,stat_type = c("receiving"),
file_type = getOption("nflreadr.prefer", default = "rds")), week == 0)
#Assessing WPA by receiver
passes <- filter(data, pass_attempt == 1, season_type == "REG", !is.na(yards_after_catch))
i <- cbind(match(passes$posteam, rownames(rolling_wins)),
match(passes$week, colnames(rolling_wins)))
passes <- cbind(rolling_win_ct = rolling_wins[i], passes)
i <- cbind(match(passes$week - 1 - passes$rolling_win_ct, rownames(playoff_probs)),
match(passes$rolling_win_ct, colnames(playoff_probs)))
passes <- cbind(playoff_prob = playoff_probs[i],passes)
pass_counts <- passes %>% count(receiver_player_name, posteam, receiver_player_id, team_color)
#  avg_wpa_wrs <- setNames(aggregate(wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "wpa"))
avg_epa_wrs <- aggregate(epa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean)
#  tot_epa_wrs <- aggregate(epa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = sum)
#  colnames(tot_epa_wrs)[4] = "tot_epa"
#  avg_cpoe_wrs <- aggregate(cpoe ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean)
passes$w_yac_wpa <- passes$yac_wpa * (1+payoff_function(passes$playoff_prob))
avg_w_yacwpa_wrs <- setNames(aggregate(w_yac_wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "w_yac_wpa"))
avg_uw_yacwpa_wrs <- setNames(aggregate(yac_wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "uw_yac_wpa"))
#  avg_yac_wrs <- aggregate(yards_after_catch ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = sum)
#  wr_data <- avg_wpa_wrs %>% merge(pass_counts, keep=F) %>% merge(avg_epa_wrs, keep=F) %>% merge(avg_cpoe_wrs, keep=F) %>% merge(avg_yacwpa_wrs, keep=F) %>% merge(avg_yac_wrs, keep=F) %>% merge(tot_epa_wrs, keep=F)
wr_data <- avg_epa_wrs %>% merge(pass_counts, keep=F) %>% merge(avg_w_yacwpa_wrs, keep=F) %>% merge(avg_uw_yacwpa_wrs, keep=F)
team_pa <- aggregate(n~posteam, data = wr_data, FUN=sum)
wr_data <- wr_data %>% merge(team_pa, by='posteam', suffixes = c("_player", "_team"))
wr_data <- wr_data %>% inner_join(contracts_with_id, by = join_by(receiver_player_id == gsis_id))
#wr_data <- filter(wr_data, n_player>50)
ng_wr_clean <- wr_data %>% inner_join(nextgen, by = join_by(receiver_player_id==player_gsis_id))
return(ng_wr_clean)
}
data_2022 = get_wr_data(2022)
data_2021 = get_wr_data(2021)
data_2020 = get_wr_data(2020)
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
#  scale(data_2022$avg_yac_above_expectation) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
#  scale(data_2021$avg_yac_above_expectation) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
#  scale(data_2020$avg_yac_above_expectation) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_yac_above_expectation", "avg_separation")])
#dta <- data_2022 %>%
inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
get_wr_data <- function(YEARS){
schedule <- filter(load_schedules(seasons = 2022), game_type == "REG")
rolling_wins <- matrix(nrow = 32, ncol = 18)
teams <- sort(unique(schedule$away_team))
for (i in 1:32){
cur_team <- teams[i]
for (j in 1:18){
rolling_wins[i,j] <- ifelse(j == 1, 0, rolling_wins[i,j-1] )
tmp <- filter(schedule, (home_team == cur_team) | away_team == cur_team, week == j-1)
if (nrow(tmp) != 0){
if (tmp$away_team[1] == cur_team){
rolling_wins[i,j] <- ifelse(j>1,
(1 * (tmp$result[1] < 0)) + rolling_wins[i,(j-1)],
0)
}
else if (tmp$home_team[1] == cur_team){
rolling_wins[i,j] <- ifelse(j>1,
(1 * (tmp$result[1] > 0)) + rolling_wins[i,(j-1)],
0)
}
}
}
}
rolling_wins <- as.data.frame(rolling_wins)
rownames(rolling_wins) <- teams
colnames(rolling_wins) <- 1:18
data = load_pbp(YEARS)
data <- data %>%
left_join(load_teams(), by = c('posteam' = 'team_abbr'))
contracts_with_id <- filter(load_contracts(), is_active == T) %>% inner_join(load_players()[,c('gsis_id', 'display_name', 'position')], by = join_by(player == display_name, position == position))
nextgen <- filter(load_nextgen_stats(seasons = YEARS,stat_type = c("receiving"),
file_type = getOption("nflreadr.prefer", default = "rds")), week == 0)
#Assessing WPA by receiver
passes <- filter(data, pass_attempt == 1, season_type == "REG", !is.na(yards_after_catch))
i <- cbind(match(passes$posteam, rownames(rolling_wins)),
match(passes$week, colnames(rolling_wins)))
passes <- cbind(rolling_win_ct = rolling_wins[i], passes)
i <- cbind(match(passes$week - 1 - passes$rolling_win_ct, rownames(playoff_probs)),
match(passes$rolling_win_ct, colnames(playoff_probs)))
passes <- cbind(playoff_prob = playoff_probs[i],passes)
pass_counts <- passes %>% count(receiver_player_name, posteam, receiver_player_id, team_color)
#  avg_wpa_wrs <- setNames(aggregate(wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "wpa"))
avg_epa_wrs <- aggregate(epa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean)
#  tot_epa_wrs <- aggregate(epa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = sum)
#  colnames(tot_epa_wrs)[4] = "tot_epa"
#  avg_cpoe_wrs <- aggregate(cpoe ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean)
passes$w_yac_wpa <- passes$yac_wpa * (1+payoff_function(passes$playoff_prob))
avg_w_yacwpa_wrs <- setNames(aggregate(w_yac_wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "w_yac_wpa"))
avg_uw_yacwpa_wrs <- setNames(aggregate(yac_wpa ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = mean), c("receiver_player_name", "posteam", "receiver_player_id", "uw_yac_wpa"))
#  avg_yac_wrs <- aggregate(yards_after_catch ~ receiver_player_name + posteam + receiver_player_id, data = passes, FUN = sum)
#  wr_data <- avg_wpa_wrs %>% merge(pass_counts, keep=F) %>% merge(avg_epa_wrs, keep=F) %>% merge(avg_cpoe_wrs, keep=F) %>% merge(avg_yacwpa_wrs, keep=F) %>% merge(avg_yac_wrs, keep=F) %>% merge(tot_epa_wrs, keep=F)
wr_data <- avg_epa_wrs %>% merge(pass_counts, keep=F) %>% merge(avg_w_yacwpa_wrs, keep=F) %>% merge(avg_uw_yacwpa_wrs, keep=F)
team_pa <- aggregate(n~posteam, data = wr_data, FUN=sum)
wr_data <- wr_data %>% merge(team_pa, by='posteam', suffixes = c("_player", "_team"))
wr_data <- wr_data %>% inner_join(contracts_with_id, by = join_by(receiver_player_id == gsis_id))
#wr_data <- filter(wr_data, n_player>50)
ng_wr_clean <- wr_data %>% inner_join(nextgen, by = join_by(receiver_player_id==player_gsis_id))
return(ng_wr_clean)
}
data_2022 = get_wr_data(2022)
data_2022 = get_wr_data(2022)
data_2021 = get_wr_data(2021)
data_2020 = get_wr_data(2020)
df <- data.frame(x2=rnorm(100),y2=rnorm(100))
annotations <- data.frame(
xpos = c(-Inf,-Inf,Inf,Inf),
ypos =  c(-Inf, Inf,-Inf,Inf),
annotateText = c("Bad","Efficient"
,"Stop Throwing","Go-To"),
hjustvar = c(0,0,1,1) ,
vjustvar = c(-2,1,-1,1)) #<- adjust
data_2022 %>%
ggplot(aes(y = w_yac_wpa, x = epa)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(data_2022$w_yac_wpa), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(data_2022$epa), color = "red", linetype = "dashed", alpha=0.5) +
geom_hline(yintercept = 0, color = "green", linetype = "solid", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  0, color = "green", linetype = "solid", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = data_2022$team_color, cex=data_2022$apy / mean(data_2022$apy), alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=player), max.overlaps = 12) +
#add a smooth line fitting wpa + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='gam')+
#titles and caption
labs(x = "Average EPA per target",
y = "Average Weighted YAC WPA per target",
title = "WR Clutch vs. Good",
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = "tomato")
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
#  scale(data_2022$avg_yac_above_expectation) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
#  scale(data_2021$avg_yac_above_expectation) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
#  scale(data_2020$avg_yac_above_expectation) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_yac_above_expectation", "avg_separation")])
#dta <- data_2022 %>%
#  inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
#  inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
df <- data.frame(x2=rnorm(100),y2=rnorm(100))
annotations <- data.frame(
xpos = c(-Inf,-Inf,Inf,Inf),
ypos =  c(-Inf, Inf,-Inf,Inf),
annotateText = c("Bad","Fun"
,"Inefficient","Clutch"),
hjustvar = c(0,0,1,1) ,
vjustvar = c(0,1,0,1)) #<- adjust
plot_clutch <- function(dataframe, yr){
dataframe %>%
ggplot(aes(y = clutch, x = targets)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(dataframe$clutch), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(dataframe$targets), color = "red", linetype = "dashed", alpha=0.5) +
geom_hline(yintercept = 0, color = "green", linetype = "solid", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  40, color = "green", linetype = "solid", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = dataframe$team_color, cex=dataframe$value / median(dataframe$value), alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=player), max.overlaps = 5) +
#add a smooth line fitting wpa + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
geom_abline(slope = -.05, intercept = (15:-5), alpha = .25)+
#titles and caption
labs(x = "Targets",
y = "Clutch factor",
title = paste("WR Clutch", yr),
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_text(data=annotations,aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = "tomato")
}
plot_clutch(data_2020, "2020")
plot_clutch(data_2021, "2021")
plot_clutch(data_2022, "2022")
tst <- filter(load_pbp(seasons = 2022), receiver_player_name == 'T.Hill', posteam == 'MIA', pass_attempt == 1)
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("yards_after_catch", "desc","yac_wpa")]
tst
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("score_differential", "yards_after_catch", "desc","yac_wpa")]
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("score_differential", "yards_after_catch", "desc","yac_wpa", "home_team","half")]
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("score_differential", "yards_after_catch", "desc","yac_wpa", "home_team","half")]
tst[order(tst$yac_wpa,decreasing = T),colnames(tst) %in% c("score_differential", "yards_after_catch", "desc","yac_wpa","qtr")]
plot_clutch(data_2020, "2020")
plot_clutch(data_2021, "2021")
plot_clutch(data_2022, "2022")
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_yac_above_expectation", "avg_separation")])
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_separation")])
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_separation")])
cor(data_2022$clutch, data_2021$clutch)
dta <- data_2022 %>%
inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
data_2022$clutch <- scale(data_2022$w_yac_wpa) +
scale(data_2022$avg_separation)
data_2021$clutch <- scale(data_2021$w_yac_wpa) +
scale(data_2021$avg_separation)
data_2020$clutch <- scale(data_2020$w_yac_wpa) +
scale(data_2020$avg_separation)
cor(data_2022[, colnames(data_2022) %in% c("w_yac_wpa", "avg_separation")])
dta <- data_2022 %>%
inner_join(data_2021, by = join_by(receiver_player_id), suffix = c("_22", "_21")) %>%
inner_join(data_2020, by = join_by(receiver_player_id), suffix = c("", "_20"))
cor(dta$clutch_22, dta$clutch_21)
cor(dta$clutch_21, dta$clutch)
cor(dta$clutch_22, dta$clutch)
plot(seq(0,1,by = 0.01), payoff_function(seq(0,1,by = 0.01)),
main = "Payoff function values per playoff probability",
xlab = 'playoff probability',
ylab = 'extra percent boost to yac_wpa')
payoff_function <- function(x){
#  ifelse(x > 0.5, (1.5 - x + 0.5)^2, (x + 1)^2)
-4*((x-0.5)^2) + 1
}
plot(seq(0,1,by = 0.01), payoff_function(seq(0,1,by = 0.01)),
main = "Payoff function values per playoff probability",
xlab = 'playoff probability',
ylab = 'extra percent boost to yac_wpa')
library(usethis)
install.packages("usethis")
library(usethis)
edit_git_config()
source("C:/Users/matth/OneDrive/Desktop/nba-pbp-data-master/PBP scrape.R", echo=TRUE)
install.packages("RJSONIO")
install.packages("RJSONIO")
library(RJSONIO);library(matrixStats);library(data.table);library(dplyr);library(zoo)
source("C:/Users/matth/OneDrive/Desktop/nba-pbp-data-master/PBP scrape.R", echo=TRUE)
setwd("C:/Users/matth/OneDrive/Desktop/ECON 1042 Psets/final project")
setwd("C:/Users/matth/OneDrive/Desktop/ECON 1042 Psets")
